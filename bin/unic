#!/usr/bin/env node

const figlet = require('figlet');
const Printer = require('@darkobits/lolcatjs');
const program = require('commander')
const inquirer = require('inquirer')
const chalk = require('chalk')
const ora = require('ora')
const shell = require('shelljs')
const download = require('download-git-repo')
const publicPath = shell.pwd().stdout
const package = require('../package.json')
const fs = require('fs')
const addComponent = require('./component/addComponent')
const addComponent2js = require('./component/addComponent2js')

let tipText = figlet.textSync('V' + package.version)
let text = Printer.fromString(tipText)

let templateList = {
    default: "direct:https://github.com/meta-na9bmkxnhzfagrp7h4/uni-bi-template.git"
}

program.version(text, "-v,--version")
program.option("create", "<projectName> 创建项目")
const bindHandle = {
    create(otherParms) {
        console.log('创建项目');
        inquirer.prompt({
            type: "list",
            name: "template",
            message: "选择模板",
            choices: ["default"]
        }).then(answer => {
            const spinner = ora('正在创建项目... ...')
            spinner.start()
            let dirName = otherParms || 'uniProject'
            const _projectPath = publicPath + '/' + dirName
            shell.cd(publicPath)
            shell.rm("-rf", _projectPath)
            shell.mkdir(_projectPath)
            download(templateList[answer.template], _projectPath, { clone: true }, error => {
                spinner.stop()
                if (error) {
                    console.log(chalk.red('初始化项目失败'));
                    console.error(error);
                }else {
                    shell.sed("-i", "load-calculate", dirName, _projectPath + "/package.json")
                }
            })
        })
    },
    addComponent(otherParms) {
        if (otherParms) {
            let allPath = publicPath + '/' + otherParms
            addComponent.addComponent(allPath)
        }
    },
    addComponent2js(otherParms) {
        if (otherParms) {
            let allPath = publicPath + '/' + otherParms
            addComponent2js.addComponent2js(allPath)
        }
    }
}
program.usage("<cmd> [env]")
    .arguments("<cmd> [env]")
    .action(function(cmd, otherParms) {
        if (!cmd) {
            return
        }
        const handler = bindHandle[cmd]
        if (handler) {
            handler(otherParms);
        } else {
            console.log(chalk.red("err: ${cmd} param is wrong"));
        }
    })

program.parse(process.argv)
